<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--  p和c命名空间  -->
    <bean id="p_NameSpace" class="com.spring.a_Intro.Person" p:name="大雄"></bean>
    <bean id="c_NameSpace" class="com.spring.a_Intro.Person" c:name="胖虎"></bean>

    <!--  scope  -->
    <bean id="singleton" class="com.spring.a_Intro.Person" p:name="大雄" scope="singleton"></bean>
    <bean id="prototype" class="com.spring.a_Intro.Person" c:name="胖虎" scope="prototype"></bean>

<!--  Bean的自动装配  -->
    <!--  准备一只宠物自动装配到下面两个例子中  -->
    <bean id="pet" name="petForAutowire" class="com.spring.a_Intro.Pet"/>

    <!--  1.autowire="byName"， 需要保证id唯一  -->
    <bean id="autowirebyName" class="com.spring.a_Intro.Person" autowire="byName">
        <property name="name" value="aaa"/>
    </bean>

    <!--  2.autowire="byType"，需要保证类型唯一  -->
    <bean id="autowirebyType" class="com.spring.a_Intro.Person" autowire="byType">
        <property name="name" value="aaa"/>
    </bean>

<!--  注解实现Bean自动装配  -->
    <!--  打开注解配置  -->
    <context:annotation-config/>

    <bean id="autowirebyAnnotation" class="com.spring.a_Intro.Person">
        <property name="name" value="aa"/>
    </bean>


<!--  Annotation 注解开发  -->
    <!--  组件扫描  -->
    <context:component-scan base-package="com.spring.b_Annotation"/>

    <bean id="student" class="com.spring.a_Intro.Person">
        <property name="name" value="aa"/>
    </bean>

    <bean id="class" class="com.spring.a_Intro.Class"/>


<!--  AOP  -->
    <bean id="beforeLog" class="com.spring.e_AOP.BeforeLog"/>
    <bean id="afterlog" class="com.spring.e_AOP.AfterLog"/>
    <bean id="userservice" class="com.spring.e_AOP.UserService"/>

    <!--  方法一：使用原生的Spring api接口  -->
    <!--  需要导入约束  -->
    <aop:config>
        <!--    定义切入点    -->
        <aop:pointcut id="pointcut" expression="execution(* com.spring.e_AOP.UserService.*(..))"/>
        <!--    环绕切入    -->
        <aop:advisor advice-ref="beforeLog" pointcut-ref="pointcut"></aop:advisor>
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>


    <!--  方法二：定义切面  -->
    <bean id="log" class="com.spring.e_AOP.Log"/>

    <aop:config>
        <aop:aspect ref="log">
            <aop:pointcut id="point" expression="execution(* com.spring.e_AOP.UserService.*(..))"/>
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>

    <!--  方法三：注解  -->
    <bean id="config" class="com.spring.e_AOP.AnnotationPointCut"></bean>
    <!--  开启注解支持  -->
    <aop:aspectj-autoproxy/>

</beans>